#!/usr/bin/env node
/**
 * Create mysqlUserObject.js file
 */

var fs = require('fs');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

var mysqlLogin = {
  host: '',
  user: '',
  password: '',
  database: 'SocialWeb'
};
var dbproperties = ['host', 'user', 'password', 'database'];

rl.setPrompt('database information...\nhost: ');
rl.prompt();
var inputIndex =0;

rl.on('line', (line)=>{
  mysqlLogin[dbproperties[inputIndex]]=line;
  console.log(mysqlLogin[dbproperties[inputIndex]]);
  inputIndex+=1;
  if (inputIndex>3) {
    rl.close();
  } else {
    rl.setPrompt(`${dbproperties[inputIndex]}: `);
    rl.prompt();
  }
});

rl.on('close', ()=> {
  fs.writeFile('mysqlUserObject.js',
    `const userInfo = {
  host: ${mysqlLogin.host},
  user: ${mysqlLogin.user},
  password: ${mysqlLogin.password},
  database: ${mysqlLogin.database}
};

module.exports = userInfo;
    `,
    'utf8', function(err) {
      if(err) throw err;
    });
  console.log('cool!');
});

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('socialweb:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
